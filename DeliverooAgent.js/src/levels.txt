
SINGLE AGENT: 

25_c1_1 COOL
25_c1_2 COOL
25_c1_3 KINDA COOL : its our logic, it is how it is (explore) 
25_c1_4 KINDA COOL : its our logic, it is how it is (explore)
25_c1_5 COOL 
25_c1_6 COOL
25_c1_7 KINDA COOL : its our logic, it is how it is (explore)
25_c1_8 BREAK with bunch of AGENTS FIXED, 
25_c1_9 COOL



MULTI AGENTS: 

25_c2_1 KINDA COOL : its our logic, it is how it is (explore)
25_c2_2 KINDA COOL : its our logic, it is how it is (explore)
25_c2_3 COOL
25_c2_4 KINDA COOL its our logic, it is how it is (getScore)
25_c2_5 KINDA COOL : its our logic, it is how it is (explore)
25_c2_6 KINDA COOL its our logic, it is how it is (getScore)
25_c2_7 KINDA COOL its our logic, it is how it is (explore)

25_c2_hallway COOL : small detail could be better



PDDL + SINGLE AGENT: 

25_c1_1 COOL
25_c1_2 KINDA COOL its our logic, it is how it is (explore)
25_c1_3 KINDA COOL : its our logic, it is how it is (explore) 
25_c1_4 KINDA COOL : its our logic, it is how it is (explore)
25_c1_5 COOL 
25_c1_6 COOL
25_c1_7 didn't check
25_c1_8 didn't check
25_c1_9 didn't check 






CLEANING CODE SUGGESTIONS : 


SINGLE AGENT: 
1-      case 'go_deliver':
            // Check if we're still carrying parcels
            if (carriedParcels.size == 0)
                return false;
                check the Path for StillValid 

2-  // Find closest delivery point when agent is at a stationary position
    // if (global.graph && Number.isInteger(me.x) && Number.isInteger(me.y)) {
    //     utils.findClosestDelivery(me.x, me.y);
    // }
    in OnYou


MUTLI AGENTS:

1-      case 'go_deliver':
            // Check if we're still carrying parcels
            if (carriedParcels.size == 0)
                return false;
                check the Path for StillValid 

2- const UPDATE_THRESHOLD = 100; // ms - minimum time difference for updates
 3-    const data = {
        sendingFreeParcels: Object.fromEntries(freeParcels),
        sendingOtherAgents: Object.fromEntries(otherAgentsToSend),
        sendingCarriedParcels: Object.fromEntries(carriedParcels)
    };
    // Send the data to the other agent using the Deliveroo API
    client.emitSay(OTHER_AGENT_ID, data);
}, 100);
100 should be changed to maybe 50 which is MOVE_DURATION

4-  // Find closest delivery point when agent is at a stationary position
    // if (global.graph && Number.isInteger(me.x) && Number.isInteger(me.y)) {
    //     utils.findClosestDelivery(me.x, me.y);
    // }
    in OnYou

PLANNING AGENTS: 
1-      case 'go_deliver':
            // Check if we're still carrying parcels
            if (carriedParcels.size == 0)
                return false;
                check the Path for StillValid 

2-  // Find closest delivery point when agent is at a stationary position
    // if (global.graph && Number.isInteger(me.x) && Number.isInteger(me.y)) {
    //     utils.findClosestDelivery(me.x, me.y);
    // }
    in OnYou